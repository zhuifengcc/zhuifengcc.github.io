{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/Spring-Cloud：Quick-start.md","hash":"97e708981458219c04dcdfa65bda17df6fb64583","modified":1527587626205},{"_id":"source/_posts/Spring-Cloud：Spring-Eurka.md","hash":"1df6c044c33e99e0afec5b11659c6cb983008b7d","modified":1527587710635},{"_id":"source/_posts/Spring Cloud：微服务架构及Spring Cloud 简介.md","hash":"02fb24564deaa8a79e56809620068e8cadab60c9","modified":1527587626204},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938080},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938080},{"_id":"public/archives/2018/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938081},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938081},{"_id":"public/2018/05/29/Spring-Cloud：Spring-Eurka/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938082},{"_id":"public/2018/05/29/Spring-Cloud：Quick-start/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938082},{"_id":"public/2018/05/24/Spring Cloud：微服务架构及Spring Cloud 简介/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527587938082}],"Category":[],"Data":[],"Page":[],"Post":[{"date":"2018-05-24T03:08:00.000Z","status":"draft","title":"Spring Cloud：微服务架构及Spring Cloud 简介","_content":"\n## 什么是微服务架构？\n简单来说，微服务是系统架构上的一种设计风格，它的主旨是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作。被拆分成的每一个小型服务都围绕着系统中的某一项或一些耦合度较高的业务功能进行构建，并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。由于有了轻量级的通信协作基础，所有这些微服务可以使用不同的语言来编写。\n\n微服务架构强调业务系统需要彻底的组件化和服务化。如果用一句话来谈SOA和微服务的区别，即微服务不在强调传统SOA架构里面比较重的ESB企业服务总线，同时SOA的思想进入到单个业务系统内部实现真正的组件化。\n\n单体系统：部署在一个进程里，修改一个小功能会影响其他功能，无法评估各个模块系统资源的使用。\n微服务系统：服务可以独立部署和扩展，松耦合，每个服务的更新不会影响其他服务的运行，可以准确对服务进行性能容量评估。\n\n单体系统中的代码依赖（进程内的方法调用）变成了服务间的通信依赖。但是微服务架构也存在很多需要去考虑的因素如网络延迟、分布式事务、异步消息等。\n\n在微服务架构中，通常会使用以下两种服务调用方式：\n\n    1、使用HTTP的Restful API或者轻量级的消息发送协议，实现消息传递与服务调用的触发。\n    2、通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的中间件。\n## Spring Cloud 简介\nSpring Cloud是一个解决微服务架构实施的综合性解决框架，它整合了诸多广泛实践和证明过得框架作为实施的基础组件，有在该体系基础上创建了一些非常优秀的边缘组件。\n\nSpring Cloud 是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。\n\nSpring Cloud的子项目，大致可分成两类：\n\n一类是对现有成熟框架Spring Boot的封装和抽象，也是数量最多的项目；\n第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream就是kafka, ActiveMQ这样的角色。开发人员进行微服务的实践，第一类子项目就已经足够使用，如：\n\n    Spring Cloud Netflix\n    　　是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。\n\n    Spring Cloud Config\n    　　将配置信息中央化保存, 配置Spring Cloud Bus可以实现动态修改配置文件。\n\n    Spring Cloud Bus\n    　　分布式消息队列，是对Kafka, MQ的封装。\n\n    Spring Cloud Security\n    　　对Spring Security的封装，并能配合Netflix使用。\n\n    Spring Cloud Zookeeper\n    　　对Zookeeper的封装，使之能配置其它Spring Cloud的子项目使用。\n\n    Spring Cloud Eureka\n        Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，它基于Netflix Eureka 做了二次分装，主要负责完成微服务架构中的服务治理功能。","source":"_posts/Spring Cloud：微服务架构及Spring Cloud 简介.md","raw":"---\ndate: 2018-05-24 11:08\nstatus: draft\ntitle: 'Spring Cloud：微服务架构及Spring Cloud 简介'\n---\n\n## 什么是微服务架构？\n简单来说，微服务是系统架构上的一种设计风格，它的主旨是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作。被拆分成的每一个小型服务都围绕着系统中的某一项或一些耦合度较高的业务功能进行构建，并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。由于有了轻量级的通信协作基础，所有这些微服务可以使用不同的语言来编写。\n\n微服务架构强调业务系统需要彻底的组件化和服务化。如果用一句话来谈SOA和微服务的区别，即微服务不在强调传统SOA架构里面比较重的ESB企业服务总线，同时SOA的思想进入到单个业务系统内部实现真正的组件化。\n\n单体系统：部署在一个进程里，修改一个小功能会影响其他功能，无法评估各个模块系统资源的使用。\n微服务系统：服务可以独立部署和扩展，松耦合，每个服务的更新不会影响其他服务的运行，可以准确对服务进行性能容量评估。\n\n单体系统中的代码依赖（进程内的方法调用）变成了服务间的通信依赖。但是微服务架构也存在很多需要去考虑的因素如网络延迟、分布式事务、异步消息等。\n\n在微服务架构中，通常会使用以下两种服务调用方式：\n\n    1、使用HTTP的Restful API或者轻量级的消息发送协议，实现消息传递与服务调用的触发。\n    2、通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的中间件。\n## Spring Cloud 简介\nSpring Cloud是一个解决微服务架构实施的综合性解决框架，它整合了诸多广泛实践和证明过得框架作为实施的基础组件，有在该体系基础上创建了一些非常优秀的边缘组件。\n\nSpring Cloud 是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。\n\nSpring Cloud的子项目，大致可分成两类：\n\n一类是对现有成熟框架Spring Boot的封装和抽象，也是数量最多的项目；\n第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream就是kafka, ActiveMQ这样的角色。开发人员进行微服务的实践，第一类子项目就已经足够使用，如：\n\n    Spring Cloud Netflix\n    　　是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。\n\n    Spring Cloud Config\n    　　将配置信息中央化保存, 配置Spring Cloud Bus可以实现动态修改配置文件。\n\n    Spring Cloud Bus\n    　　分布式消息队列，是对Kafka, MQ的封装。\n\n    Spring Cloud Security\n    　　对Spring Security的封装，并能配合Netflix使用。\n\n    Spring Cloud Zookeeper\n    　　对Zookeeper的封装，使之能配置其它Spring Cloud的子项目使用。\n\n    Spring Cloud Eureka\n        Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，它基于Netflix Eureka 做了二次分装，主要负责完成微服务架构中的服务治理功能。","slug":"Spring Cloud：微服务架构及Spring Cloud 简介","published":1,"updated":"2018-05-29T09:53:46.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhrif0j00001u8vbglsdmg43","content":"<h2 id=\"什么是微服务架构？\"><a href=\"#什么是微服务架构？\" class=\"headerlink\" title=\"什么是微服务架构？\"></a>什么是微服务架构？</h2><p>简单来说，微服务是系统架构上的一种设计风格，它的主旨是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作。被拆分成的每一个小型服务都围绕着系统中的某一项或一些耦合度较高的业务功能进行构建，并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。由于有了轻量级的通信协作基础，所有这些微服务可以使用不同的语言来编写。</p>\n<p>微服务架构强调业务系统需要彻底的组件化和服务化。如果用一句话来谈SOA和微服务的区别，即微服务不在强调传统SOA架构里面比较重的ESB企业服务总线，同时SOA的思想进入到单个业务系统内部实现真正的组件化。</p>\n<p>单体系统：部署在一个进程里，修改一个小功能会影响其他功能，无法评估各个模块系统资源的使用。<br>微服务系统：服务可以独立部署和扩展，松耦合，每个服务的更新不会影响其他服务的运行，可以准确对服务进行性能容量评估。</p>\n<p>单体系统中的代码依赖（进程内的方法调用）变成了服务间的通信依赖。但是微服务架构也存在很多需要去考虑的因素如网络延迟、分布式事务、异步消息等。</p>\n<p>在微服务架构中，通常会使用以下两种服务调用方式：</p>\n<pre><code>1、使用HTTP的Restful API或者轻量级的消息发送协议，实现消息传递与服务调用的触发。\n2、通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的中间件。\n</code></pre><h2 id=\"Spring-Cloud-简介\"><a href=\"#Spring-Cloud-简介\" class=\"headerlink\" title=\"Spring Cloud 简介\"></a>Spring Cloud 简介</h2><p>Spring Cloud是一个解决微服务架构实施的综合性解决框架，它整合了诸多广泛实践和证明过得框架作为实施的基础组件，有在该体系基础上创建了一些非常优秀的边缘组件。</p>\n<p>Spring Cloud 是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p>\n<p>Spring Cloud的子项目，大致可分成两类：</p>\n<p>一类是对现有成熟框架Spring Boot的封装和抽象，也是数量最多的项目；<br>第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream就是kafka, ActiveMQ这样的角色。开发人员进行微服务的实践，第一类子项目就已经足够使用，如：</p>\n<pre><code>Spring Cloud Netflix\n　　是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。\n\nSpring Cloud Config\n　　将配置信息中央化保存, 配置Spring Cloud Bus可以实现动态修改配置文件。\n\nSpring Cloud Bus\n　　分布式消息队列，是对Kafka, MQ的封装。\n\nSpring Cloud Security\n　　对Spring Security的封装，并能配合Netflix使用。\n\nSpring Cloud Zookeeper\n　　对Zookeeper的封装，使之能配置其它Spring Cloud的子项目使用。\n\nSpring Cloud Eureka\n    Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，它基于Netflix Eureka 做了二次分装，主要负责完成微服务架构中的服务治理功能。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是微服务架构？\"><a href=\"#什么是微服务架构？\" class=\"headerlink\" title=\"什么是微服务架构？\"></a>什么是微服务架构？</h2><p>简单来说，微服务是系统架构上的一种设计风格，它的主旨是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作。被拆分成的每一个小型服务都围绕着系统中的某一项或一些耦合度较高的业务功能进行构建，并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。由于有了轻量级的通信协作基础，所有这些微服务可以使用不同的语言来编写。</p>\n<p>微服务架构强调业务系统需要彻底的组件化和服务化。如果用一句话来谈SOA和微服务的区别，即微服务不在强调传统SOA架构里面比较重的ESB企业服务总线，同时SOA的思想进入到单个业务系统内部实现真正的组件化。</p>\n<p>单体系统：部署在一个进程里，修改一个小功能会影响其他功能，无法评估各个模块系统资源的使用。<br>微服务系统：服务可以独立部署和扩展，松耦合，每个服务的更新不会影响其他服务的运行，可以准确对服务进行性能容量评估。</p>\n<p>单体系统中的代码依赖（进程内的方法调用）变成了服务间的通信依赖。但是微服务架构也存在很多需要去考虑的因素如网络延迟、分布式事务、异步消息等。</p>\n<p>在微服务架构中，通常会使用以下两种服务调用方式：</p>\n<pre><code>1、使用HTTP的Restful API或者轻量级的消息发送协议，实现消息传递与服务调用的触发。\n2、通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的中间件。\n</code></pre><h2 id=\"Spring-Cloud-简介\"><a href=\"#Spring-Cloud-简介\" class=\"headerlink\" title=\"Spring Cloud 简介\"></a>Spring Cloud 简介</h2><p>Spring Cloud是一个解决微服务架构实施的综合性解决框架，它整合了诸多广泛实践和证明过得框架作为实施的基础组件，有在该体系基础上创建了一些非常优秀的边缘组件。</p>\n<p>Spring Cloud 是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p>\n<p>Spring Cloud的子项目，大致可分成两类：</p>\n<p>一类是对现有成熟框架Spring Boot的封装和抽象，也是数量最多的项目；<br>第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream就是kafka, ActiveMQ这样的角色。开发人员进行微服务的实践，第一类子项目就已经足够使用，如：</p>\n<pre><code>Spring Cloud Netflix\n　　是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。\n\nSpring Cloud Config\n　　将配置信息中央化保存, 配置Spring Cloud Bus可以实现动态修改配置文件。\n\nSpring Cloud Bus\n　　分布式消息队列，是对Kafka, MQ的封装。\n\nSpring Cloud Security\n　　对Spring Security的封装，并能配合Netflix使用。\n\nSpring Cloud Zookeeper\n　　对Zookeeper的封装，使之能配置其它Spring Cloud的子项目使用。\n\nSpring Cloud Eureka\n    Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，它基于Netflix Eureka 做了二次分装，主要负责完成微服务架构中的服务治理功能。\n</code></pre>"},{"layout":"w","title":"Spring Cloud：Spring Eurka","date":"2018-05-29T09:55:10.000Z","_content":"","source":"_posts/Spring-Cloud：Spring-Eurka.md","raw":"---\nlayout: w\ntitle: Spring Cloud：Spring Eurka\ndate: 2018-05-29 17:55:10\ntags:\n---\n","slug":"Spring-Cloud：Spring-Eurka","published":1,"updated":"2018-05-29T09:55:10.635Z","comments":1,"photos":[],"link":"","_id":"cjhrif0j20002u8vbgrqbvqzn","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}